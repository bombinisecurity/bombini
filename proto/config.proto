syntax = "proto3";

package config;

// Configuration file for ProcMon detector
message ProcMonConfig {
    // Flag for exporting  ProcessExec and ProcessExit events from kernel to user mode.
    bool expose_events = 1;
    // setuid hook config.
    ProcHookConfig setuid = 2;
    // capset hook config.
    ProcHookConfig capset = 3;
    // prctl hook config.
    ProcHookConfig prctl = 4;
    // create_user_ns hook config.
    ProcHookConfig create_user_ns = 5;
    // ptrace_attach hook config.
    ProcHookConfig ptrace_access_check = 6;
    // Process Filter Configuration.
    ProcessFilter process_filter = 7;
    // Collect IMA hashes for executed binaries.
    optional bool ima_hash = 8;
}

// ProcMon hook configuration
message ProcHookConfig {
    // do not load ebpf program
    bool enabled = 1;
    // filter by Cred
    CredFilter cred_filter = 2;
}

// Filter Events using process information.
// Filtering is based on pattern: uid AND euid AND auid AND (binary.name OR binary.prefix OR binary.path).
// All variables in the pattern are optional. if deny_list is true filter acts as a deny list, otherwise it
// is an allow list.
message ProcessFilter {
    // List of UID's to filter.
    repeated uint32 uid = 1;
    // List of EUID's to filter.
    repeated uint32 euid = 2;
    // List of AUID's (login uid) to filter.
    repeated uint32 auid = 3;
    // Binary filter args
    PathFilter binary = 4;
    // if true acts like deny list
    bool deny_list = 5;
}

// Filter Events using Cred information. Pattern uid_filter || cap_filter.
message CredFilter {
    // Filter by uids (euid, TODO: uid, fsuid).
    UidFilter uid_filter = 1;
    // Filter by  caps (effective, TODO: permited, inheritable).
    CapFilter cap_filter = 2;
}

// Capabilities filter
message CapFilter {
    // List of effective Capabilities. Special name ANY means if any cap is in effective cap set.
    repeated string effective = 1;
    // if true acts like deny list
    optional bool deny_list = 2;
}

// UID filter
message UidFilter {
    // effective UID
    repeated uint32 euid = 1;
}

// Path filtering args
message PathFilter {
    // List of executables names to filter.
    repeated string name = 1;
    // List of full executable paths to filter.
    repeated string path = 2;
    // List of executable path prefixes to filter.
    repeated string prefix = 3;
}

// Configuration file for FileMon detector.
message FileMonConfig {
    // security_file_open config.
    FileHookConfig file_open = 1;
    // security_path_truncate config.
    FileHookConfig path_truncate = 2;
    // security_path_unlink config.
    FileHookConfig path_unlink = 3;
    // security_path_chmod config.
    FileHookConfig path_chmod = 4;
    // security_path_chown config.
    FileHookConfig path_chown = 5;
    // security_sb_mount config.
    FileHookConfig sb_mount = 6;
    // security_mmap_file config.
    FileHookConfig mmap_file = 7;
    // security_file_ioctl config.
    FileHookConfig file_ioctl = 8;
    // Filter File events by Process information.
    ProcessFilter process_filter = 9;
}

// FileMon hook configuration
message FileHookConfig {
    // Do not load ebpf program
    bool enabled = 1;
    // Filter event by Path
    optional PathFilter path_filter = 2;
}

// IP filter configuration
message  IpFilter {
    // Source IP list
    repeated string src_ip = 1;
    // Destination IP list
    repeated string dst_ip = 2;
    // deny_list
    bool deny_list = 3;
}
// Connections control
message ConnectionsControl {
    // Do not load ebpf program
    bool enabled = 1;
    // Ipv4 filter connections
    IpFilter ipv4_filter = 2;
    // Ipv6 filter connections
    IpFilter ipv6_filter = 3;
}
// Configuration file for NetMon detector.
message NetMonConfig {
    // Filter Network events by Process information.
    ProcessFilter process_filter = 1;
    // Ingress traffic connections
    ConnectionsControl ingress = 2;
    // Egress traffic connections
    ConnectionsControl egress = 3;
}

// Configuration file for IOUringMon detector.
message IOUringMonConfig {
    // Filter io_uring events by Process information.
    ProcessFilter process_filter = 1;
}

// Configuration file for GTFOBinsDetector.
message GTFOBinsConfig {
    // Block execution of GTFOBins binaries.
    bool enforce = 1;
    // GTFOBins executables names.
    repeated string gtfobins = 2;
}